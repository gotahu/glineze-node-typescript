(()=>{"use strict";var e={417:function(e,t,r){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};if(Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0,i(r(818)).default.config(),t.config={discord:{botToken:process.env.DISCORD_BOT_TOKEN},notion:{token:process.env.NOTION_TOKEN,configurationDatabaseId:process.env.NOTION_CONFIGURATION_DATABASEID},lineNotify:{voidToken:process.env.LINE_NOTIFY_VOID_TOKEN},server:{port:3e3},webhook:{secret:process.env.WEBHOOK_SECRET},repository:{path:process.env.REPOSITORY_PATH||"../../",branch:process.env.BRANCH||"main"},webpack:{}},!t.config.discord.botToken)throw new Error("DISCORD_BOT_TOKEN is not defined");if(!t.config.notion.token)throw new Error("NOTION_TOKEN is not defined");if(!t.config.notion.configurationDatabaseId)throw new Error("NOTION_CONFIGURATION_DATABASEID is not defined");if(!t.config.webhook.secret)throw new Error("WEBHOOK_SECRET is not defined")},870:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ERROR_MESSAGES=t.CONSTANTS=void 0,t.CONSTANTS={LINE_NOTIFY_API:"https://notify-api.line.me/api/notify",DEFAULT_REACTION_TIME_SECONDS:300},t.ERROR_MESSAGES={DB_ID_NOT_FOUND:"データベースの id が正しく config に設定されていない可能性があります。管理者に連絡してください。",NO_DATA_FOUND_ON_SHUKIN_DATABASE:"集金 DB にあなたのデータが見つかりませんでした。整備が完了していない可能性があります。管理者に連絡してください。"}},946:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.deleteNotificationMessage=t.addNotificationMessage=t.retrieveNotificationMessages=void 0;const i=r(628);t.retrieveNotificationMessages=async function(e,t){try{const r=e.getConfig("notification_messages_databaseid"),n=t?{property:"messageId",title:{equals:t}}:void 0,o=await e.queryAllDatabasePages(r,n);return o?o.reduce(((e,t)=>{const r=t.properties.messageId,i=t.properties.userId;if("title"in r&&"rich_text"in i){const t=r.title[0].plain_text,n=i.rich_text[0].plain_text,o=e.find((e=>e.messageId===t));o?o.userId.push(n):e.push({messageId:t,userId:[n]})}return e}),[]):(i.logger.info("info: 通知対象メッセージなし"),[])}catch(e){return i.logger.error("Error in retrieveNotificationMessages: "+e),[]}},t.addNotificationMessage=async function(e,t,r){try{const i=e.getConfig("notification_messages_databaseid");await e.client.pages.create({parent:{database_id:i},properties:{messageId:{title:[{type:"text",text:{content:t}}]},userId:{rich_text:[{type:"text",text:{content:r}}]}}})}catch(e){i.logger.error("Error in addNotificationMessage: "+e)}},t.deleteNotificationMessage=async function(e,t,r){try{const i=e.getConfig("notification_messages_databaseid"),n=await e.client.databases.query({database_id:i,filter:{and:[{property:"messageId",title:{equals:t}},{property:"userId",rich_text:{equals:r}}]}});if(0===n.results.length)throw new Error(`Notification message with messageId ${t} and userId ${r} not found.`);await e.client.pages.update({page_id:n.results[0].id,archived:!0})}catch(e){i.logger.error("Error in deleteNotificationMessage: "+e)}}},867:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.remindPracticeToBashotori=t.announcePractice=void 0;const i=r(628);t.announcePractice=async function(e,t,r){try{const n=await e.retrievePracticesForRelativeDay(r);if(0===n.length)return void i.logger.info(`${r} 日後の練習は見つかりませんでした`);const o=e.getConfig("practice_remind_channelid"),a=e.getConfig("practice_remind_threadid");await t.sendStringsToChannel(n.map((e=>e.announceText)),o,a)}catch(e){i.logger.error("Error in announcePractice: "+e)}},t.remindPracticeToBashotori=async function(e,t){try{const r=e.getConfig("facility_databaseid"),n=await e.queryAllDatabasePages(r,{property:"リマインド",rich_text:{is_not_empty:!0}});if(0===n.length)return void i.logger.info("リマインドが未設定の施設はありません");for(const r of n){const n=e.getStringPropertyValue(r,"タイトル","title"),o=Number.parseInt(e.getStringPropertyValue(r,"リマインド","rich_text"));if(void 0===o||Number.isNaN(o)){i.logger.error(`リマインド日数が取得できませんでした: ${n}`);continue}const a=(await e.retrievePracticesForRelativeDay(o)).filter((e=>e.place===n));if(console.log(a),a.length>0){const r=e.getConfig("bashotori_remind_channelid"),s=e.getConfig("bashotori_remind_threadid"),c=`## 場所取りリマインド\n@everyone\nリマインド対象の「${n}」で ${o} 日後に練習があります。\n${a.map((e=>`- [${e.title}](${e.url})`)).join("\n")}`;await t.sendStringsToChannel([c],r,s),i.logger.info(`リマインドを送信しました: ${n}`)}else i.logger.info(`リマインド対象の練習はありませんでした: ${n}`)}}catch(e){i.logger.error("Error in remindPracticeToBashotori: "+e)}}},199:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DiscordService=void 0;const i=r(685),n=r(628),o=r(102),a=r(417),s=r(85);class c{constructor(e,t){this.notionService=e,this.lineNotifyService=t,c.instance=this,this.messageHandler=new s.MessageHandler(e,t);const r={intents:[i.GatewayIntentBits.Guilds,i.GatewayIntentBits.GuildMessages,i.GatewayIntentBits.MessageContent,i.GatewayIntentBits.GuildMessageReactions,i.GatewayIntentBits.DirectMessages],partials:[i.Partials.Message,i.Partials.Channel,i.Partials.Reaction,i.Partials.ThreadMember,i.Partials.GuildMember]};this.client=new i.Client(r),this.client.on("ready",(()=>{this.client.user?n.logger.info("Discord bot is online as "+this.client.user.tag):console.log("Discord bot を起動できませんでした")})),this.client.on("messageCreate",(e=>{this.messageHandler.handleMessageCreate(e)})),this.client.on("messageReactionAdd",((e,t)=>(0,o.handleReactionAdd)(e,t,this.notionService,this.lineNotifyService))),this.client.on("interactionCreate",o.handleInteractionCreate)}start(){this.client.login(a.config.discord.botToken)}static getInstance(){return c.instance||console.error("DiscordService は初期化されていません"),c.instance}async sendContentToChannel(e,t,r,o){try{const a=e.channels.cache.get(r);if(console.log(a),a instanceof i.TextChannel){const e=o?await a.threads.fetch(o):a;console.log(a),e?(Array.isArray(t)&&t[0]instanceof i.EmbedBuilder?await e.send({embeds:t}):"string"==typeof t&&await e.send(t),n.logger.info("Content sent to "+(o?"thread":"channel"))):n.logger.error((o?"Thread":"Channel")+" not found")}else n.logger.error("Channel is not a TextChannel")}catch(e){n.logger.error("Error sending content: "+e)}}async sendStringsToChannel(e,t,r){for(const i of e)await this.sendContentToChannel(this.client,i,t,r)}async sendEmbedsToChannel(e,t,r){await this.sendContentToChannel(this.client,e,t,r)}async sendLINEMessageToDiscord(e,t){const r=await this.notionService.getLINEDiscordPairs(),i="undefined"===e?"1037911984399724634":r.find((t=>t.line_group_id==e))?.discord_channel_id;i?await this.sendStringsToChannel([t],i):n.logger.error(`error: LINE BOTがメッセージを受信しましたが、対応するDiscordチャンネルが見つかりませんでした\nmessage: ${t}`)}}t.DiscordService=c},102:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.handleReactionAdd=t.handleInteractionCreate=void 0;const i=r(685),n=r(946),o=r(628);t.handleInteractionCreate=async e=>{if(e.isButton())switch(e.customId){case"delete":if(e.message.channel instanceof i.ThreadChannel){const t=e.message.channel.ownerId;if(t){const r=[t,e.user.id,e.client.user.id];await async function(e,t){try{const r=(await e.members.fetch()).filter((e=>!t.includes(e.id)));await Promise.all(r.map((t=>e.members.remove(t.id))))}catch(e){throw console.error("Failed to remove members:",e),e}}(e.message.channel,r),await e.reply({content:"指定されたメンバーをスレッドから削除しました。",ephemeral:!0})}else await e.reply({content:"この操作はスレッド内でのみ有効です。",ephemeral:!0})}break;case"ignore":e.message.deletable&&await e.message.delete()}},t.handleReactionAdd=async function(e,t,r,s){if(t.bot)return;console.log(e),e.message.fetch().then((r=>{o.logger.info(`${e.message.guild} で ${t.tag} が ${e.emoji.name} を ${r.cleanContent} に対してリアクションしました`)}));const c=e.message.partial?await async function(e){if(e.partial)try{return await e.fetch()}catch(t){o.logger.error(`Failed to fetch the message: ${e.id}, ${t}`)}else o.logger.error(`This message is not partial: ${e.id}`)}(e.message):e.message;if(!c)return void o.logger.error("メッセージオブジェクトが存在しませんでした。");if(c.channel.type===i.ChannelType.DM)return void o.logger.info("ignore DM");const l=e.message.id;if("✅"===e.emoji.name&&(await e.users.fetch()).has(e.client.user.id)){if(t.id!==c.author.id)return;e.remove(),s.postTextToLINENotifyFromDiscordMessage(r,c,!1)}"📢"===e.emoji.name&&(e.remove(),s.postTextToLINENotifyFromDiscordMessage(r,c,!1));const g=await(0,n.retrieveNotificationMessages)(r,l),d=t.id,u=e.client.users.cache.get(d);if(!u)return void o.logger.error("通知対象者のDiscord User オブジェクトを取得できませんでした。");const h=g.length>0&&g[0].userId.includes(d);if("🔔"!==e.emoji.name&&"🔕"!==e.emoji.name&&!h)return;const f=c.url;if("🔔"===e.emoji.name)if(e.remove(),h)o.logger.info(`messageId: ${l} はすでに通知対象に指定されています`),u.send(a("warning",`エラー： ${f} はすでに通知対象に設定されています。`));else try{await(0,n.addNotificationMessage)(r,l,d),o.logger.info(`messageId: ${l} を通知対象のメッセージとしました`),u.send(a("white_check_mark",`${f} を通知対象に設定しました`))}catch(e){o.logger.error(`messageId: ${l} を通知対象のメッセージとできませんでした ${e}`),u.send(a("warning",`エラー： ${f} を通知対象に設定できませんでした。${e}`))}else if("🔕"===e.emoji.name)if(e.remove(),h)try{await(0,n.deleteNotificationMessage)(r,l,d),o.logger.info(`messageId: ${l} を通知対象から削除しました`),u.send(a("person_gesturing_ok_tone1",`${f} を通知対象から削除しました。もうこのメッセージの通知は来ません。`))}catch(e){o.logger.error(`messageId: ${l} の通知対象からの削除に失敗しました, ${e}`),u.send(a("warning",`エラー： ${f} の通知対象からの削除に失敗しました。${e}`))}else o.logger.error(`messageId: ${l} は通知対象ではありません。`),u.send(a("warning",`エラー： ${f} はそもそも通知対象になっていません。`));else for(const t of g[0].userId)try{(await e.client.users.fetch(t)).send(a("bell",`${f} に（${e.message.author.username}）さんがリアクション（${e.emoji.name}）しました。`)),o.logger.info(`通知対象者に通知を送信しました。userId: ${t}, mesaggeId: ${l}`)}catch(e){o.logger.error(`通知対象者に通知を送信できませんでした。userId: ${t}, mesaggeId: ${l}`)}};const a=(e,t)=>`:${e}: ： ${t}`},85:function(e,t,r){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MessageHandler=void 0;const n=r(685),o=r(417),a=r(628),s=r(870),c=i(r(938));t.MessageHandler=class{constructor(e,t){this.notion=e,this.lineNotify=t}async handleMessageCreate(e){e.author.bot||(console.log(e),e.channel.type===n.ChannelType.DM?await this.handleDMMessage(e):await this.handleGuildMessage(e))}async handleDMMessage(e){const t=e.content,r=e.author.id,i=e.author.displayName;e.channel.sendTyping(),await this.lineNotify.postTextToLINENotify(o.config.lineNotify.voidToken,`${i}\n${t}`);try{const t=await this.notion.retrieveGlanzeMember(r);if(!t)return void e.reply("### エラーが発生しました。\n- エラー内容：団員名簿からあなたの情報を見つけることができませんでした。準備が整っていない可能性があるので、管理者に問い合わせてください。");const i=await this.notion.retrieveShukinStatus(t);"error"===i.status?e.reply("### エラーが発生しました。\n- エラー内容："+i.message):e.reply(i.message)}catch(t){a.logger.error("Error in retrieveShukinStatus: "+t),e.reply("### エラーが発生しました。\n- エラー内容："+t)}}async handleGuildMessage(e){if(e.guild&&e.guild.id,e.type!==n.MessageType.Default&&e.type!==n.MessageType.Reply)return void a.logger.info(`system message, type: ${e.type}`);if(e.content.includes("GLOBALIP")){try{const t=(await c.default.get("https://api.ipify.org?format=json")).data.ip;e.reply(t)}catch(e){a.logger.error("Error fetching IP: "+e)}return}if(e.channel.isThread()&&e.channel.parent&&e.channel.parent.name.includes("スレッド")&&e.mentions.roles.some((e=>e.name.includes("全員")))){const t=(new n.ActionRowBuilder).addComponents((new n.ButtonBuilder).setCustomId("delete").setLabel("消去する").setStyle(n.ButtonStyle.Danger),(new n.ButtonBuilder).setCustomId("ignore").setLabel("無視する").setStyle(n.ButtonStyle.Secondary));return void e.reply({content:"スレッドチャンネルで全員にメンションを行いました。\nBOTはこのイベントを取り消すことはできません。\n\nもしこれが意図した動作ではない場合、スレッドの作成者・ボタンを押すあなた・BOTの3者を残し、他の人を一旦スレッドから削除します。\nその後、再度意図する人をメンションし直してください。",components:[t]})}const t=e.channel.isThread()&&e.channel.parent?e.channel.parent.id:e.channelId;if((await this.notion.getLINEDiscordPairs()).find((e=>e.discord_channel_id==t))){e.react("✅"),a.logger.info("reaction added");const t=this.notion.getConfig("reaction_time_seconds"),r=t?parseInt(t):s.CONSTANTS.DEFAULT_REACTION_TIME_SECONDS;setTimeout((()=>{e.reactions.cache.get("✅")?.remove(),a.logger.info("reaction removed after timeout")}),1e3*r)}e.member&&e.channel?this.lineNotify.postTextToLINENotifyFromDiscordMessage(this.notion,e,!0):a.logger.error("error: message member or channel cannot be detected")}}},439:function(e,t,r){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LINENotifyService=void 0;const n=i(r(938)),o=r(870),a=r(628),s=r(685),c=r(417);t.LINENotifyService=class{async postToLINENotify(e,t,r){try{const i=await n.default.post(o.CONSTANTS.LINE_NOTIFY_API,new URLSearchParams({message:t,imageThumbnail:r,imageFullsize:r}).toString(),{headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:"Bearer "+e},responseType:"json"});console.log(i.data)}catch(e){a.logger.error("Error occurred in LINE Notify API"),e instanceof n.default.AxiosError&&e.response?(a.logger.error(`Error status: ${e.response.status}`),a.logger.error(`Error data: ${JSON.stringify(e.response.data)}`)):e instanceof Error&&a.logger.error(e.message)}}async postTextToLINENotify(e,t){await this.postToLINENotify(e,t,"")}async postTextWithImageToLINENotify(e,t,r){await this.postToLINENotify(e,t,r)}async postTextToLINENotifyFromDiscordMessage(e,t,r=!1){const i=t.cleanContent,n=t.author.partial?await t.author.fetch():t.author,o=t.channel.type===s.ChannelType.DM?"DM":t.guild.name;let l=c.config.lineNotify.voidToken;if(t.channel.type===s.ChannelType.DM)return void this.postTextToLINENotify(l,`${o}: ${n.displayName}\n${i}`);if(!r){const r=await e.getLINEDiscordPairs(),i=t.channel.isThread()&&t.channel.parent?t.channel.parent.id:t.channel.id,n=r.find((e=>e.discord_channel_id===i));n&&(a.logger.info("LINE Notify token found for channel ID: "+i),l=n.line_notify_key)}let g=`${o}: #`;if(t.channel.isThread()&&t.channel.parent&&(g+=`${t.channel.parent.name} > `),g+=`${t.channel.name}\n${n.displayName}:`,0===t.attachments.size)return a.logger.info("Discord から LINE Notify へ送信。添付ファイルなし。"),void this.postTextToLINENotify(l,g+"\n"+i);a.logger.info("Discord から LINE Notify へ送信。添付ファイルあり。");let d=1;for(const e of t.attachments.values()){if(console.log(e),!e)return;e.height&&e.width?await this.postTextWithImageToLINENotify(l,`${g} 画像 ${d}枚目\n${i}`,e.url):await this.postTextToLINENotify(l,`${g} ファイル ${d}つ目\n${e.url}\n${i}`),d++}}}},37:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NotionService=void 0;const i=r(496),n=r(417),o=r(628),a=r(185);class s{constructor(){this.cache=null,this.config=new Map,this.client=new i.Client({auth:n.config.notion.token}),this.initializeConfig()}async initializeConfig(){try{const e=await this.queryAllDatabasePages(n.config.notion.configurationDatabaseId);for(const t of e){const e=this.getStringPropertyValue(t,"key","title"),r=this.getStringPropertyValue(t,"value","rich_text");this.config.set(e,r),o.logger.info(`Configuration key: ${e} value: ${r}`)}}catch(e){throw o.logger.error(`Failed to initialize configuration on NotionService: ${e}`),new Error("Failed to initialize NotionService due to missing configuration")}}getConfig(e){const t=this.config.get(e);if(!t)throw new Error(`Configuration key not found: ${e}`);return t}async getLINEDiscordPairs(){return this.cache?(o.logger.info("LINEDiscordPairs をキャッシュから取得しました"),this.cache):(o.logger.info("LINEDiscordPairs を Notion から取得します"),this.cache=await this.retireveLINEDiscordPairs(),this.cache)}async retireveLINEDiscordPairs(){try{const e=this.getConfig("discord_and_line_pairs_databaseid"),t=await this.client.databases.query({database_id:e});if(!t)return o.logger.error("Discord と LINE のペア情報を Notion データベースから取得できませんでした"),[];if(o.logger.info(`Discord と LINE のペア情報を${t.results.length}件取得しました`),!t.results)return[];return t.results.filter((e=>"page"===e.object)).map((e=>({name:this.getStringPropertyValue(e,"名前","title"),line_group_id:this.getStringPropertyValue(e,"line_group_id","rich_text"),discord_channel_id:this.getStringPropertyValue(e,"discord_channel_id","rich_text"),line_notify_key:this.getStringPropertyValue(e,"line_notify_key","rich_text")})))}catch(e){return o.logger.error(`Failed to retrieve LINEDiscordPairs: ${e}`),[]}}async getConfigValue(e){try{const t=await this.client.databases.query({database_id:n.config.notion.configurationDatabaseId,filter:{property:"key",title:{equals:e}}});if(0===t.results.length)return void o.logger.error(`Notion の config データベースに key: ${e} が存在しません`);const r=t.results[0];return this.getStringPropertyValue(r,"value","rich_text")}catch(t){throw new Error(`Failed to fetch the configuration value for key: ${e}`)}}getStringPropertyValue(e,t,r){for(const[i,n]of Object.entries(e.properties))if(i===t&&n.type===r){if("title"===n.type&&n.title)return n.title[0].plain_text;if("select"===n.type&&n.select)return n.select.name;if("multi_select"===n.type&&n.multi_select)return n.multi_select.map((e=>e.name)).join(",");if("rich_text"===n.type&&n.rich_text&&n.rich_text.length>0)return n.rich_text[0].plain_text;if("status"===n.type&&n.status)return n.status.name;if("url"===n.type&&n.url)return n.url;if("formula"===n.type&&n.formula&&"string"in n.formula)return n.formula.string}return o.logger.error(`Notionページ ${e.id} に ${t} プロパティは存在しません`),""}getNumberPropertyValue(e,t,r){for(const[i,n]of Object.entries(e.properties))if(i===t&&n.type===r&&"number"===n.type&&n.number)return n.number}async getRelationPropertyValue(e,t){const r=[];return await Promise.all(Object.entries(e.properties).map((async([e,i])=>{if(e===t&&"relation"===i.type){const e=await Promise.all(i.relation.map((async e=>{const t=e.id;return await this.retrieveNotionPage(t)})));r.push(...e)}}))),r}async queryAllDatabasePages(e,t){let r,i=!0;const n=[];for(;i;){const o=await this.client.databases.query({database_id:e,start_cursor:r,filter:t}),a=o.results;n.push(...a),i=o.has_more,r=o.next_cursor??void 0}return n}async retrieveNotionPage(e){return await this.client.pages.retrieve({page_id:e})}async retrieveGlanzeMember(e){try{const t=this.getConfig("discord_and_notion_pairs_databaseid"),r=await this.client.databases.query({database_id:t,filter:{property:"Discord",rich_text:{equals:e}}});if(!r||0===r.results.length)return void o.logger.error(`DiscordId: ${e} に対して、Discord と Notion のペア情報を正しく取得できませんでした。`);const i=r.results[0],n={notionPageId:i.id,discordUserId:e,name:this.getStringPropertyValue(i,"名前","title"),generation:this.getStringPropertyValue(i,"期","select"),part4:this.getStringPropertyValue(i,"4パート","select"),part8:this.getStringPropertyValue(i,"8パート","select")};return console.debug(n),n}catch(e){return void o.logger.error(`Failed to retrieve GlanzeMember: ${e}`)}}async retrieveShukinStatus(e){try{const t=this.getConfig("shukin_databaseid"),r=await this.queryShukinDatabase(t,e.notionPageId),i=this.extractShukinInfo(r);return{status:"success",message:this.formatReplyMessage(e.name,i)}}catch(e){return o.logger.error(`Error in retrieveShukinStatus: ${e}`),this.createErrorReply("予期せぬエラーが発生しました。マネジに連絡してください。")}}async queryShukinDatabase(e,t){const r=await this.client.databases.query({database_id:e,filter:{property:"団員",relation:{contains:t}}});if(!r||0===r.results.length)throw new Error(s.ERROR_MESSAGES.NO_DATA_FOUND);return r.results[0]}extractShukinInfo(e){const t=[];return Object.entries(e.properties).forEach((([r,i])=>{if("number"===i.type&&i.number){const n=e.properties[`${r}ステータス`];"status"===n.type&&n.status&&t.push({shukinName:r,shukinAmount:`${i.number}円`,shukinStatus:n.status.name})}})),t}formatReplyMessage(e,t){let r=`${e} さんの集金状況をお知らせします。\n### 集金状況`;return 0===t.length?r+="\n- 集金対象がありません。":r+=t.map((e=>`\n- ${e.shukinName}：${e.shukinAmount}（${e.shukinStatus}）`)).join(""),r+="\n### 注意事項",r+=s.STATUS_NOTES.map((e=>`\n- ${e}`)).join(""),r}createErrorReply(e){return{status:"error",message:e}}async retrievePracticesForRelativeDay(e){const t=new Date;t.setDate(t.getDate()+e);const r=t.toLocaleDateString("ja-JP",{year:"numeric",month:"2-digit",day:"2-digit"}).split("/").join("-");o.logger.info(`retirevePracticeForRelativeDay: formattedDate: ${r}`);try{const e=this.getConfig("practice_databaseid"),i=(await this.client.databases.query({database_id:e,filter:{property:"日付",date:{equals:r}}})).results.filter((e=>"page"===e.object)),n=[];for(const e of i){const r=await this.retrieveNotionPage(e.id);console.log(r);const i={url:r.url,id:r.id,title:this.getStringPropertyValue(r,"タイトル","title"),date:t,time:this.getStringPropertyValue(r,"時間","select"),timetable:this.getStringPropertyValue(r,"練習内容","rich_text"),place:"",announceText:""},o=await this.getRelationPropertyValue(r,"練習場所");console.log(o),o.length>0&&(i.place=this.getStringPropertyValue(o[0],"タイトル","title"));const s=this.getStringPropertyValue(r,"練習連絡","formula");s&&(i.announceText=(0,a.replaceEnglishDayWithJapanese)(s)),n.push(i)}return n}catch(e){throw o.logger.error(`Failed to retrieve practices for relative day: ${e}`),new Error("Failed to retrieve practices for relative day")}}}t.NotionService=s,s.ERROR_MESSAGES={DB_ID_NOT_FOUND:"集金DBのIDがconfigに適切に設定されていない可能性があります。マネジに連絡してください。",NO_DATA_FOUND:"Notion上の集金DBにあなたのデータが見つかりませんでした。整備が完了していない可能性があります。マネジに連絡してください。"},s.STATUS_NOTES=["（受取済）（振込済）の場合、パトマネさんが受け取ったあと、会計さんが確認中です。","（受取確認済）（振込確認済）の場合、会計さんの確認まで全て終了しています。"]},148:function(e,t,r){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebServer=void 0;const n=i(r(268)),o=i(r(252)),a=r(417),s=r(628),c=r(181);t.WebServer=class{constructor(){this.app=(0,o.default)(),this.app.use(n.default.urlencoded({extended:!0})),this.app.use(n.default.json()),this.webhookService=new c.WebhookService,this.setupRoutes()}setupRoutes(){this.app.post("/webhook",(async(e,t)=>{const r=e.headers["x-hub-signature-256"];if(!this.webhookService.verifySignature(JSON.stringify(e.body),r))return s.logger.error("Invalid webhook signature"),void t.status(403).send("Invalid signature");try{await this.webhookService.handlePushEvent(e.body.ref),t.status(200).send("Success")}catch(e){s.logger.error("Error in handlePushEvent: "+e),t.status(500).send("Error")}}))}start(){this.app.listen(a.config.server.port,(()=>{s.logger.info("webserver(express) is online on port "+a.config.server.port)}))}}},181:function(e,t,r){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebhookService=void 0;const n=i(r(807)),o=r(417),a=i(r(982)),s=r(628),c=i(r(188));t.WebhookService=class{constructor(){this.git=(0,n.default)(o.config.repository.path)}verifySignature(e,t){const r="sha256="+a.default.createHmac("sha256",o.config.webhook.secret).update(e).digest("hex");return a.default.timingSafeEqual(Buffer.from(r),Buffer.from(t))}async handlePushEvent(e){e===o.config.repository.branch?(s.logger.info(`Received push event for branch ${e}`),await this.pullChanges(),await this.runBuild(),s.logger.info("Build finished")):s.logger.info(`Received push event for branch ${e}, but ignored`)}async pullChanges(){try{await this.git.pull("origin",o.config.repository.branch),s.logger.info("Git pull finished")}catch(e){throw s.logger.error("Error in git pull: "+e),e}}async runBuild(){return new Promise(((e,t)=>{(0,c.default)(o.config.webpack,((r,i)=>{r||i.hasErrors()?(s.logger.error("Error in webpack build: "+r),t(new Error("Webpack build failed"))):(s.logger.info(i.toString({colors:!0})),e())}))}))}}},185:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.replaceEnglishDayWithJapanese=void 0,t.replaceEnglishDayWithJapanese=function(e){const t={Sun:"日",Mon:"月",Tue:"火",Wed:"水",Thu:"木",Fri:"金",Sat:"土"};for(const[r,i]of Object.entries(t)){const t=new RegExp(`\\(${r}\\)`,"g");e=e.replace(t,`(${i})`)}return e}},628:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.logger=void 0;const i=r(199);t.logger={info:e=>console.log(`[INFO] ${e}`),debug:async e=>{console.log(`[DEBUG] ${e}`),await n(`[DEBUG] ${e}`)},error:async e=>{const t=`[ERROR] ${e}`;console.error(t)}};const n=async e=>{try{const t=i.DiscordService.getInstance();if(!t)throw new Error("DiscordService is not initialized");await t.sendStringsToChannel([e],"1273731421663395973")}catch(e){console.error(`Error sending error message to Discord: ${e}`)}}},496:e=>{e.exports=require("@notionhq/client")},938:e=>{e.exports=require("axios")},268:e=>{e.exports=require("body-parser")},685:e=>{e.exports=require("discord.js")},818:e=>{e.exports=require("dotenv")},252:e=>{e.exports=require("express")},807:e=>{e.exports=require("simple-git")},188:e=>{e.exports=require("webpack")},982:e=>{e.exports=require("crypto")}},t={};function r(i){var n=t[i];if(void 0!==n)return n.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,r),o.exports}(()=>{const e=r(628),t=r(199),i=r(148),n=r(37),o=r(439),a=r(867);(async function(){const r=new i.WebServer,s=new n.NotionService,c=new o.LINENotifyService,l=new t.DiscordService(s,c);r.start(),l.start(),r.app.post("/",(async(t,r)=>{try{if(e.logger.info(JSON.stringify(t.body)),!t.body||!t.body.events)return e.logger.error("No post data or events array"),void r.end();const i=t.body.events;for(const t of i)switch(t.type){case"wake":e.logger.info("GAS: 定期起動監視スクリプト受信");break;case"noonNotify":e.logger.info("GAS: noonNotify"),await(0,a.announcePractice)(s,l,1).catch((t=>{e.logger.error(`Error in noonNotify: ${t}`)}));break;case"AKanRemind":e.logger.info("GAS: AKanRemind"),await(0,a.remindPracticeToBashotori)(s,l).catch((t=>{e.logger.error(`Error in AKanRemind: ${t}`)}));break;case"message":if(t.groupid&&t.name&&t.message){e.logger.info("LINE: line message to discord channel");const r=`${t.name}：\n${t.message}`;await l.sendLINEMessageToDiscord(t.groupid,r),await l.sendStringsToChannel([r],"1273731421663395973")}break;case"join":case"leave":e.logger.info(`LINE: ${t.type}`),e.logger.info(JSON.stringify(t));break;default:e.logger.error(`Unknown event type: ${t.type}`)}r.end()}catch(e){console.error(e),r.status(500).end()}}))})().catch((t=>{console.error(t),e.logger.error(`Fatal error in main execution: ${t}`)}))})()})();